<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       			           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
	
    <bean name="sessionXmlRebuilderJob" class="org.nrg.xnat.helpers.prearchive.SessionXMLRebuilderJob" />

    <bean name="sessionXmlRebuilderJobBean" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.nrg.schedule.DelegatingJobBean" />
        <property name="name" value="session-rebuilder"/>
        <property name="group" value="prearchive-jobs"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="job.bean.name" value="sessionXmlRebuilderJob" />
                <entry key="interval" value="${services.rebuilder.interval}" />
                <entry key="user" value-ref="receivedFileUserProvider" />
            </map>
        </property>
    </bean>

    <bean id="sessionXmlRebuilderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobName" value="session-rebuilder-trigger" />
        <property name="jobGroup" value="prearchive-triggers"/>
        <property name="jobDetail" ref="sessionXmlRebuilderJobBean" />
        <property name="repeatInterval" value="${services.rebuilder.repeat}" />
    </bean>
    
   	<bean name="disableInactiveUsersJob" class="org.nrg.xnat.security.DisableInactiveUsersJob" />

    <bean name="disableInactiveUsersJobBean" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.nrg.schedule.DelegatingJobBean" />
        <property name="name" value="disable-inactive-users"/>
        <property name="group" value="users-jobs"/>
        <property name="jobDataAsMap">
            <map>
          		<entry key="job.bean.name" value="disableInactiveUsersJob" />
                <entry key="inactivityBeforeLockout" value="${security.inactivity_before_lockout}" />
            </map>
        </property>
    </bean>
    
   	<bean id="disableInactiveUsersTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobName" value="disable-inactive-users-trigger" />
        <property name="jobGroup" value="users-triggers"/>
        <property name="jobDetail" ref="disableInactiveUsersJobBean" />
        <property name="repeatInterval" value="86400000" />
    </bean>
    
    <bean name="resetFailedLoginsJob" class="org.nrg.xnat.security.ResetFailedLoginsJob" />

    <bean name="resetFailedLoginsJobBean" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.nrg.schedule.DelegatingJobBean" />
        <property name="name" value="reset-failed-logins"/>
        <property name="group" value="users-jobs"/>
        <property name="jobDataAsMap">
            <map>
          		<entry key="job.bean.name" value="resetFailedLoginsJob" />
            </map>
        </property>
    </bean>
    
   	<bean id="resetFailedLoginsTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobName" value="reset-failed-logins-trigger" />
        <property name="jobGroup" value="users-triggers"/>
        <property name="jobDetail" ref="resetFailedLoginsJobBean" />
        <property name="repeatInterval" value="${security.max_failed_logins_lockout_duration}" />
    </bean>
    
    <bean name="resetEmailRequestsJob" class="org.nrg.xnat.security.ResetEmailRequestsJob" />

    <bean name="resetEmailRequestsJobBean" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.nrg.schedule.DelegatingJobBean" />
        <property name="name" value="reset-email-requests"/>
        <property name="group" value="users-jobs"/>
        <property name="jobDataAsMap">
            <map>
          		<entry key="job.bean.name" value="resetEmailRequestsJob" />
            </map>
        </property>
    </bean>
    
   	<bean id="resetEmailRequestsTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobName" value="reset-email-requests-trigger" />
        <property name="jobGroup" value="users-triggers"/>
        <property name="jobDetail" ref="resetEmailRequestsJobBean" />
        <property name="repeatInterval" value="900000" /> <!--  Every 15 minutes  -->
    </bean>

   	<bean name="clearExpiredAliasTokensJob" class="org.nrg.xnat.security.alias.ClearExpiredAliasTokensJob" />

    <bean name="clearExpiredAliasTokensJobBean" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.nrg.schedule.DelegatingJobBean" />
        <property name="name" value="clear-expired-alias-tokens"/>
        <property name="group" value="users-jobs"/>
        <property name="jobDataAsMap">
            <map>
          		<entry key="job.bean.name" value="clearExpiredAliasTokensJob" />
                <entry key="tokenTimeout" value="${security.token_timeout}" />
                <entry key="queries">
                    <util:list value-type="java.lang.String">
                        <value><![CDATA[DELETE FROM xhbm_alias_token_validipaddresses WHERE alias_token in (SELECT id FROM xhbm_alias_token WHERE created < NOW() - INTERVAL '%s')]]></value>
                        <value><![CDATA[DELETE FROM xhbm_alias_token WHERE created < NOW() - INTERVAL '%s']]></value>
                    </util:list>
                </entry>
            </map>
        </property>
    </bean>

   	<bean id="clearExpiredAliasTokensTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobName" value="clear-expired-alias-tokens-trigger" />
        <property name="jobGroup" value="users-triggers"/>
        <property name="jobDetail" ref="clearExpiredAliasTokensJobBean" />
        <property name="repeatInterval" value="3600000" />
    </bean>

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="sessionXmlRebuilderTrigger" />
                <ref bean="disableInactiveUsersTrigger" />
                <ref bean="resetFailedLoginsTrigger" />
                <ref bean="clearExpiredAliasTokensTrigger" />
                <ref bean="resetEmailRequestsTrigger" />
            </list>
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
    </bean>

</beans>
