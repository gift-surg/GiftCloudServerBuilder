<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <context:property-placeholder location="WEB-INF/conf/services.properties" ignore-unresolvable="true"/>
    <context:annotation-config />

    <context:component-scan base-package="org.nrg.xnat.security.controllers"/>

    <util:list id="decisionVoters">
        <ref bean="roleVoter"/>
        <ref bean="authenticatedVoter"/>
    </util:list>

    <bean class="org.springframework.security.access.vote.UnanimousBased" id="unanimousBased" p:decisionVoters-ref="decisionVoters"/>

    <bean class="org.springframework.security.access.vote.RoleVoter" id="roleVoter" p:rolePrefix="ROLE_"/>

    <bean class="org.springframework.security.access.vote.AuthenticatedVoter" id="authenticatedVoter"/>

    <bean class="org.nrg.xnat.security.OnXnatLogin" id="logUserLogin"/>

    <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" id="authFailure">
        <constructor-arg value="/app/template/Login.vm?failed=true" />
    </bean> 

    <bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
        p:loginFormUrl="/app/template/Login.vm"/>

    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <property name="sessionRegistry" ref="sessionRegistry" />
        <property name="expiredUrl" value="/app/template/Login.vm" />
    </bean>
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
    <bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <property name="maximumSessions" value="${security.sessions.concurrent_max}"/>
        <property name="exceptionIfMaximumExceeded" value="true"/>
    </bean>
    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg index="0" value="/app/template/Login.vm"/>
        <constructor-arg index="1">
            <list>
                <ref bean="xnatLogoutHandler"/>
                <ref bean="securityContextLogoutHandler"/>
            </list>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/app/action/LogoutUser" />
    </bean>
    <bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="true" />
    </bean>  
    <bean id="xnatLogoutHandler" class="org.nrg.xnat.security.XnatLogoutHandler">
        <property name="sessionRegistry" ref="sessionRegistry" />
    </bean>

    <security:http auto-config="false" use-expressions="true" entry-point-ref="loginUrlAuthenticationEntryPoint">
        <security:intercept-url pattern="/app/template/Login.vm" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/app/template/Register.vm" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/app/template/ForgotLogin.vm" access="permitAll" requires-channel="${security.channel}"/>
		<security:intercept-url pattern="/app/template/ChangePassword.vm" access="permitAll" requires-channel="${security.channel}"/>
		<security:intercept-url pattern="/app/action/XDATChangePassword" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/app/action/XDATForgotLogin" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/app/action/XDATRegisterUser" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/app/template/Error.vm" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/images/**" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/scripts/**" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/style/**" access="permitAll" requires-channel="${security.channel}"/>
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" requires-channel="${security.channel}"/>
        <security:custom-filter before="FORM_LOGIN_FILTER" ref="customAuthenticationFilter"/>
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="customBasicAuthenticationFilter"/>
		<security:custom-filter before="REMEMBER_ME_FILTER" ref="arcSpecFilter"/>
		<security:custom-filter after="SECURITY_CONTEXT_FILTER" ref="expiredPasswordFilter"/>
        <security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
        <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter" />
        <security:session-management session-authentication-strategy-ref="sas"/>
    </security:http>

    <bean id="databaseAuthenticationProviderConfigurator" class="org.nrg.xnat.security.config.DatabaseAuthenticationProviderConfigurator" p:configuratorId="db"/>
    <bean id="ldapAuthenticationProviderConfigurator" class="org.nrg.xnat.security.config.LdapAuthenticationProviderConfigurator" p:configuratorId="ldap1"/>

    <bean id="customAuthenticationManager" name="org.springframework.security.authenticationManager" class="org.nrg.xnat.security.XnatProviderManager">
        <property name="properties" value="WEB-INF/conf/services.properties"/>
        <property name="authenticationProviderConfigurators">
            <map key-type="java.lang.String" value-type="org.nrg.xnat.security.config.AuthenticationProviderConfigurator">
                <entry key="db" value-ref="databaseAuthenticationProviderConfigurator"/>
                <entry key="ldap1" value-ref="ldapAuthenticationProviderConfigurator"/>
            </map>
        </property>
    </bean>

    <bean id="customAuthenticationFilter" class="org.nrg.xnat.security.XnatAuthenticationFilter">
        <property name="authenticationManager" ref="customAuthenticationManager" />
        <property name="authenticationSuccessHandler" ref="logUserLogin" />
        <property name="authenticationFailureHandler" ref="authFailure" />
        <property name="sessionAuthenticationStrategy" ref="sas" />
    </bean>

    <bean id="customBasicAuthenticationFilter" class="org.nrg.xnat.security.XnatBasicAuthenticationFilter">
        <property name="authenticationManager" ref="customAuthenticationManager" />
        <property name="authenticationEntryPoint" ref="loginUrlAuthenticationEntryPoint" />
        <property name="sessionAuthenticationStrategy" ref="sas" />
    </bean>

	<bean id="expiredPasswordFilter" class="org.nrg.xnat.security.XnatExpiredPasswordFilter">
        <property name="changePasswordPath" value="/app/template/ChangePassword.vm"/>
        <property name="changePasswordDestination" value="/app/action/XDATChangePassword"/>
    </bean>
	
	<bean id="arcSpecFilter" class="org.nrg.xnat.security.XnatArcSpecFilter">
        <property name="configurationPath" value="/app/template/Configuration.vm"/>
        <property name="nonAdminErrorPath" value="/app/template/Unconfigured.vm"/>
        <property name="changePasswordPath" value="/app/template/ChangePassword.vm"/>
        <property name="changePasswordDestination" value="/app/action/XDATChangePassword"/>
    </bean>
	
    <bean id="aliasTokenAuthProvider" class="org.nrg.xnat.security.alias.AliasTokenAuthenticationProvider"/>

    <bean id="customDatabaseService" class="org.nrg.xnat.security.userdetailsservices.XnatDatabaseUserDetailsService" p:dataSource-ref="dataSource"/>

</beans>
