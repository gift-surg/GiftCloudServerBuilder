<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <context:property-placeholder location="WEB-INF/conf/services.properties,WEB-INF/conf/services-custom.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />

    <context:annotation-config />

    <context:component-scan base-package="org.nrg.xnat.security.controllers"/>

    <util:list id="decisionVoters">
        <ref bean="roleVoter"/>
        <ref bean="authenticatedVoter"/>
    </util:list>

    <bean class="org.springframework.security.access.vote.UnanimousBased" id="unanimousBased" p:decisionVoters-ref="decisionVoters"/>

    <bean class="org.springframework.security.access.vote.RoleVoter" id="roleVoter" p:rolePrefix="ROLE_"/>

    <bean class="org.springframework.security.access.vote.AuthenticatedVoter" id="authenticatedVoter"/>

    <bean class="org.nrg.xnat.security.OnXnatLogin" id="logUserLogin"/>

    <bean class="org.nrg.xnat.security.XnatUrlAuthenticationFailureHandler" id="authFailure">
        <constructor-arg value="/app/template/Login.vm?failed=true" />
        <constructor-arg value="/app/template/PostRegister.vm" />
    </bean> 

    <bean id="loginUrlAuthenticationEntryPoint" class="org.nrg.xnat.security.XnatAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/app/template/Login.vm"/>
        <property name="dataPaths">
            <list value-type="java.lang.String">
                <value>/data/**</value>
                <value>/REST/**</value>
            </list>
        </property>
        <property name="interactiveAgents">
            <list value-type="java.lang.String">
                <value>.*MSIE.*</value>
                <value>.*Mozilla.*</value>
                <value>.*AppleWebKit.*</value>
                <value>.*Opera.*</value>
            </list>
        </property>
    </bean>

    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <property name="sessionRegistry" ref="sessionRegistry" />
        <property name="expiredUrl" value="/app/template/Login.vm" />
    </bean>
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
    <bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <property name="maximumSessions" value="${security.sessions.concurrent_max}"/>
        <property name="exceptionIfMaximumExceeded" value="true"/>
    </bean>
    <bean id="xnatLogoutSuccessHandler" class="org.nrg.xnat.security.XnatLogoutSuccessHandler" p:openXnatLogoutSuccessUrl="/" p:securedXnatLogoutSuccessUrl="/app/template/Login.vm"/>
    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg index="0" ref="xnatLogoutSuccessHandler" type="org.springframework.security.web.authentication.logout.LogoutSuccessHandler"/>
        <constructor-arg index="1">
            <list>
                <ref bean="xnatLogoutHandler"/>
                <ref bean="securityContextLogoutHandler"/>
            </list>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/app/action/LogoutUser" />
    </bean>
    <bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="true" />
    </bean>  
    <bean id="xnatLogoutHandler" class="org.nrg.xnat.security.XnatLogoutHandler">
        <property name="sessionRegistry" ref="sessionRegistry" />
    </bean>

    <security:http auto-config="false" use-expressions="true" entry-point-ref="loginUrlAuthenticationEntryPoint">
        <security:custom-filter position="CHANNEL_FILTER" ref="channelProcessingFilter"/>
        <security:custom-filter before="FORM_LOGIN_FILTER" ref="customAuthenticationFilter"/>
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="customBasicAuthenticationFilter"/>
		<security:custom-filter before="REMEMBER_ME_FILTER" ref="arcSpecFilter"/>
		<security:custom-filter after="SECURITY_CONTEXT_FILTER" ref="expiredPasswordFilter"/>
        <security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
        <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter" />
        <!-- Adding the openid-login tag activates Spring Security's support for OpenID  -->
        <!-- security:openid-login
                login-page="/app/template/Login.vm"
                authentication-failure-url="/app/template/Login.vm?failed=true"
                default-target-url="/"/ -->
        <security:session-management session-authentication-strategy-ref="sas"/>
    </security:http>

    <bean class="org.nrg.xnat.security.FilterSecurityInterceptorBeanPostProcessor">
        <property name="openUrls">
            <list>
                <value>/app/template/Login.vm*</value>
                <value>/app/template/Register.vm*</value>
                <value>/app/template/ForgotLogin.vm*</value>
                <value>/app/template/ChangePassword.vm*</value>
                <value>/app/action/XDATChangePassword*</value>
                <value>/app/action/XDATForgotLogin*</value>
                <value>/app/action/XDATRegisterUser*</value>
                <value>/app/template/Error.vm*</value>
                <value>/app/template/PostRegister.vm*</value>
                <value>/app/template/VerifyEmail.vm*</value>
                <value>/app/template/VerificationSent.vm*</value>
                <value>/app/template/ResendVerification.vm*</value>
                <value>/favicon.ico</value>
                <value>/data/version</value>
                <value>/REST/version</value>
                <value>/data/JSESSION</value>
                <value>/REST/JSESSION</value>
                <value>/data/services/auth*</value>
                <value>/REST/services/auth*</value>
                <value>/images/**</value>
                <value>/scripts/**</value>
                <value>/style/**</value>
                <value>/applet/**</value>
            </list>
        </property>
    </bean>

    <bean id="channelProcessingFilter" class="org.nrg.xnat.security.TranslatingChannelProcessingFilter">
        <property name="channelDecisionManager">
            <bean id="channelDecisionManager" class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
                <property name="channelProcessors">
                    <list>
                        <bean class="org.springframework.security.web.access.channel.SecureChannelProcessor"/>
                        <bean class="org.springframework.security.web.access.channel.InsecureChannelProcessor"/>
                    </list>
                </property>
            </bean>
        </property>
        <property name="requiredChannel" value="${security.channel}" />
    </bean>

    <bean id="aliasTokenAuthProvider" class="org.nrg.xnat.security.alias.AliasTokenAuthenticationProvider" p:name="token"/>
    <bean id="databaseAuthenticationProviderConfigurator" class="org.nrg.xnat.security.config.DatabaseAuthenticationProviderConfigurator" p:configuratorId="db"/>
    <bean id="ldapAuthenticationProviderConfigurator" class="org.nrg.xnat.security.config.LdapAuthenticationProviderConfigurator" p:configuratorId="ldap"/>

    <bean id="customAuthenticationManager" name="org.springframework.security.authenticationManager" class="org.nrg.xnat.security.XnatProviderManager">
        <property name="properties">
        	<list value-type="java.lang.String">
        		<value>WEB-INF/conf/services.properties</value>
        		<value>WEB-INF/conf/services-custom.properties</value>
        	</list>
        </property>
        <property name="standaloneProviders">
            <util:list>
                <ref bean="aliasTokenAuthProvider"/>
            </util:list>
        </property>
        <property name="authenticationProviderConfigurators">
            <map key-type="java.lang.String" value-type="org.nrg.xnat.security.config.AuthenticationProviderConfigurator">
                <entry key="db" value-ref="databaseAuthenticationProviderConfigurator"/>
                <entry key="ldap" value-ref="ldapAuthenticationProviderConfigurator"/>
            </map>
        </property>
    </bean>

    <bean id="customAuthenticationFilter" class="org.nrg.xnat.security.XnatAuthenticationFilter">
        <property name="authenticationManager" ref="customAuthenticationManager" />
        <property name="authenticationSuccessHandler" ref="logUserLogin" />
        <property name="authenticationFailureHandler" ref="authFailure" />
        <property name="sessionAuthenticationStrategy" ref="sas" />
    </bean>

    <bean id="customBasicAuthenticationFilter" class="org.nrg.xnat.security.XnatBasicAuthenticationFilter">
        <property name="authenticationManager" ref="customAuthenticationManager" />
        <property name="authenticationEntryPoint" ref="loginUrlAuthenticationEntryPoint" />
        <property name="sessionAuthenticationStrategy" ref="sas" />
    </bean>

	<bean id="expiredPasswordFilter" class="org.nrg.xnat.security.XnatExpiredPasswordFilter">
        <property name="changePasswordPath" value="/app/template/ChangePassword.vm"/>
        <property name="changePasswordDestination" value="/app/action/XDATChangePassword"/>
        <property name="logoutDestination" value="/app/action/LogoutUser"/>
    </bean>
	
	<bean id="arcSpecFilter" class="org.nrg.xnat.security.XnatArcSpecFilter">
        <property name="configurationPath" value="/app/template/Configuration.vm"/>
        <property name="nonAdminErrorPath" value="/app/template/Unconfigured.vm"/>
        <property name="exemptedPaths">
            <list value-type="java.lang.String">
                <value>/app/template/ChangePassword.vm</value>
                <value>/app/action/XDATChangePassword</value>
                <value>/app/template/Login.vm</value>
                <value>/j_spring_security_check</value>
            </list>
        </property>
    </bean>
	
    <bean id="customDatabaseService" class="org.nrg.xnat.security.userdetailsservices.XnatDatabaseUserDetailsService" p:dataSource-ref="dataSource"/>

</beans>
