<?xml version="1.0" encoding="UTF-8"?><!--Sample XML file generated by XMLSPY v2004 rel. 3 U (http://www.xmlspy.com)--><Displays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../xdat/display.xsd" schema-element="xdat:user">	<DisplayField id="LOGIN" header="Username" visible="true">		<DisplayFieldElement name="Field1" schema-element="xdat:user.login"/>		<HTML-Link>			<Property name="HREF" value="none"/>			<Property name="ONCLICK" value="return rpt('@Field1','xdat:user','xdat:user.login');">				<InsertValue id="Field1" field="LOGIN"/>			</Property>		</HTML-Link>	</DisplayField>	<DisplayField id="RPT" header="" visible="true" image="true">		<Content type="sql">'/@WEBAPP/images/r.gif'</Content>		<HTML-Link>			<Property name="HREF" value="none"/>			<Property name="ONCLICK" value="return rpt('@Field1','xdat:user','xdat:user.login');">				<InsertValue id="Field1" field="LOGIN"/>			</Property>		</HTML-Link>	</DisplayField>	<DisplayField id="ACTIVE" header="Auth." visible="true" image="true">		<DisplayFieldElement name="Field1" schema-element="xdat:user.meta.status"/>		<Content type="sql">CASE @Field1 WHEN 'active' THEN '/@WEBAPP/images/cg.gif' ELSE  '/@WEBAPP/images/cr.gif' END</Content>	</DisplayField>	<DisplayField id="FIRST" header="First name" visible="true" sort-order="ASC">		<DisplayFieldElement name="Field1" schema-element="xdat:user.firstname"/>	</DisplayField>	<DisplayField id="LAST" header="Last name" visible="true" sort-order="ASC">		<DisplayFieldElement name="Field1" schema-element="xdat:user.lastname"/>	</DisplayField>	<DisplayField id="FIRST_LAST" header="Name" visible="true" sort-order="ASC">		<DisplayFieldElement name="Field1" schema-element="xdat:user.firstname"/>		<DisplayFieldElement name="Field2" schema-element="xdat:user.lastname"/>		<Content type="sql">@Field2 || ', ' || @Field1</Content>	</DisplayField>	<DisplayField id="EMAIL" header="Email" visible="true" sort-order="ASC">		<DisplayFieldElement name="Field1" schema-element="xdat:user.email"/>		<HTML-Link>			<Property name="HREF" value="none"/>			<Property name="ONCLICK" value="return email('@Field1');">				<InsertValue id="Field1" field="EMAIL"/>			</Property>		</HTML-Link>	</DisplayField>	<DisplayField id="LAST_LOGIN" header="Last Login" visible="true" sort-order="ASC">		<DisplayFieldElement name="Field1" viewName="LAST_LOGIN" viewColumn="LOGIN_DATE"/>		<Content type="sql">CAST (@Field1 AS VARCHAR)</Content>	</DisplayField>	<DisplayField id="ENABLED" header="Enabled" visible="true" sort-order="DESC" image="true">		<DisplayFieldElement name="Field1" schema-element="xdat:user.enabled"/>		<Content type="sql">CASE @Field1 WHEN 0 THEN '/@WEBAPP/images/cg.gif' WHEN 1 THEN '/@WEBAPP/images/cr.gif' END</Content>	</DisplayField>	<DisplayVersion versionName="listing" default-order-by="FIRST_LAST" brief-description="Users" dark-color="DEDEDE" light-color="FFFFFF">		<DisplayFieldRef id="LOGIN"/>		<DisplayFieldRef id="FIRST_LAST"/>		<DisplayFieldRef id="EMAIL"/>		<DisplayFieldRef id="LAST_LOGIN"/>		<DisplayFieldRef id="ACTIVE"/>		<DisplayFieldRef id="ENABLED"/>	</DisplayVersion>	<ViewLink alias="LAST_LOGIN">		<Mapping TableName="LAST_LOGIN">			<MappingColumn rootElement="xdat:user" fieldElement="xdat:user.xdat_user_id" mapsTo="USER_ID"/>		</Mapping>	</ViewLink>	<SQLView name="LAST_LOGIN" sql="select DISTINCT ON (user_xdat_user_id) user_xdat_user_id AS USER_ID, login_date FROM xdat_user_login ORDER BY user_xdat_user_id,login_date DESC"/>	<SQLFunction name="sortedstrings " content="CREATE TYPE sortedstrings AS   (strings &quot;varchar&quot;,    sort_order int4);"/>	<SQLFunction name="getnextview" content="CREATE OR REPLACE FUNCTION getnextview()  RETURNS name AS$BODY$DECLARE 	my_record RECORD;	viewName name;BEGIN	FOR my_record IN SELECT c.relname FROM pg_catalog.pg_class AS c LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE     c.relkind IN ('v') AND n.nspname NOT IN ('pg_catalog', 'pg_toast') AND pg_catalog.pg_table_is_visible(c.oid) LIMIT 1	LOOP		viewName := my_record.relname;	END LOOP;	RETURN (viewName);END; $BODY$  LANGUAGE 'plpgsql' VOLATILE;"/>	<SQLFunction name="viewcount" content="CREATE OR REPLACE FUNCTION viewcount()  RETURNS int8 AS$BODY$DECLARE 	my_record RECORD;	counter int8;BEGIN	FOR my_record IN SELECT * FROM (SELECT COUNT (c.relname) AS view_count FROM pg_catalog.pg_class AS c LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE     c.relkind IN ('v') AND n.nspname NOT IN ('pg_catalog', 'pg_toast') AND pg_catalog.pg_table_is_visible(c.oid) LIMIT 1) AS COUNT_TABLE	LOOP		counter := my_record.view_count;	END LOOP;	RETURN (counter);END; $BODY$  LANGUAGE 'plpgsql' VOLATILE"/>	<SQLFunction name="getsortedstring" content="CREATE OR REPLACE FUNCTION getsortedstring(&quot;varchar&quot;, int4)  RETURNS sortedstrings AS$BODY$DECLARE	sorted_strings sortedStrings%ROWTYPE;BEGIN	sorted_strings.strings:=$1;	sorted_strings.sort_order:=$2;	return sorted_strings;END;$BODY$  LANGUAGE 'plpgsql' VOLATILE;"/>	<SQLFunction name="removeviews" content="CREATE OR REPLACE FUNCTION removeviews()  RETURNS varchar AS$BODY$DECLARE	viewName name;	viewCounter int8;BEGIN	SELECT INTO viewName getnextview();	SELECT INTO viewCounter viewCount();	WHILE (viewCounter > 0) 	LOOP		EXECUTE 'DROP VIEW '|| viewName || ' CASCADE';		RAISE NOTICE 'DROPPED %. % more.',viewName,viewCounter;		SELECT INTO viewName getnextview();		SELECT INTO viewCounter viewCount();	END LOOP;	RETURN ('DONE');END; $BODY$  LANGUAGE 'plpgsql' VOLATILE;"/>	<SQLFunction name="stringstosortedtable" content="CREATE OR REPLACE FUNCTION stringstosortedtable(_varchar)  RETURNS SETOF sortedstrings AS$BODY$DECLARE	i int:=1;	sorted_strings sortedStrings%ROWTYPE;BEGIN	while ($1[i] IS NOT NULL) loop		sorted_strings:=getSortedString($1[i],i);		return next sorted_strings;		i:=i+1;	end loop;return;END;$BODY$  LANGUAGE 'plpgsql' VOLATILE;"/></Displays>