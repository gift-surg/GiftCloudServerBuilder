##Copyright 2005 Harvard University / Howard Hughes Medical Institute (HHMI) All Rights Reserved
$page.addAttribute("onLoad", "document.form1.destination.focus();")
##<font face="$ui.sansSerifFonts" size="2">
##<span class="ui_sansSerifFonts">

<script type="text/javascript" src="$content.getURI('scripts/subjectAssessorData/proj_subj_selector.js')"></script>
<script type="text/javascript">

    function verifyExptId(obj){}

    function newProjSubjSel(){
        window.ProjectSubjectManager = new ProjectSubjectSelector("project","part_id",null,"$!project","$!part_id");
        window.ProjectSubjectManager.init();
    }

    function selected_labeler(_this) {
        var _this_label = _this.find('option:selected').text();
        _this.find('.selected_label').text(_this_label);
    }

    function checkForProject() {
        var proj_check = setInterval(function(){
            if (jq('#selected_project option:selected').length){ //check if selected option is loaded
                selected_labeler(jq('#selected_project'));
                clearInterval(proj_check);
            }
        },20);
    }

    function checkForSubject(){
        var subj_check = setInterval(function(){
            if (jq('#selected_subject option:selected').length){ //check if selected option is loaded
                selected_labeler(jq('#selected_subject'));
                clearInterval(subj_check);
            }
        },20);
    }

    // wait for DOM to load to make sure elements are on the page.
    jq(function(){
        newProjSubjSel();
    });

</script>
<div id="add_experiment">

    #if ($turbineUtils.GetPassedParameter("popup",$data))
        #set ($popup = $turbineUtils.GetPassedParameter("popup",$data) )
    #else
        #set ($popup = "false")
    #end

##    <style type="text/css"></style>

##    <script type="text/javascript"></script>

    <form id="form1" name="form1"
    ##ONSUBMIT="return validate();"
          method="post" action="$link.setAction("CreateExperiment")">

        <input type="hidden" name="popup" VALUE="$popup" />

        #if($part_id && $project)

            <p id="selected_project" class="selected"><b class="label">$displayManager.getSingularDisplayNameForProject(): </b> <span class="selected_label" title="$project"></span> <select id="project" name="project" style="display:none;"></select></p>
            <p id="selected_subject" class="selected"><b class="label">$displayManager.getSingularDisplayNameForSubject(): </b> <span class="selected_label" title="$part_id"></span> <select id="part_id" name="part_id" style="display:none;"></select></p>

            <script type="text/javascript">
                jq(function(){
                    checkForProject();
                    checkForSubject();
                });
            </script>

        #elseif($project)

            <p id="selected_project" class="selected"><b class="label">$displayManager.getSingularDisplayNameForProject(): </b> <span class="selected_label" title="$project"></span> <select id="project" name="project" style="display:none;"></select></p>

            <p><b class="label">$displayManager.getSingularDisplayNameForSubject(): </b> <select id="part_id" name="part_id"></select></p>

            <script type="text/javascript">
                jq(function(){
                    checkForProject();
                });
            </script>

        #else

            <p><span class="label">$displayManager.getSingularDisplayNameForProject(): </span> <select disabled="disabled" id="project" name="project"></select></p>
            <p><span class="label">$displayManager.getSingularDisplayNameForSubject(): </span> <select disabled="disabled" id="part_id" name="part_id"></select></p>

        #end

        <br>

        <div id="expt_list">

            <p class="label">
                <b>What type of experiment are you entering?</b>
                <br>
                <i>(clicking the experiment row will create a new experiment)</i>
            </p>

            <div class="rows">

                #if ( $data.Message )

                    <div class="error">$data.message</div>

                #end

                <div id="expt_list_filter">
                    <p><span class="label" style="display:inline;">Filter: </span>&nbsp;<input type="text" size="45" value="" /> &nbsp; <a id="filter_clear" class="btn2">clear</a> </p>
                </div>

                #set($dC=0)

                #foreach($ed in $data.getSession().getAttribute("user").getBrowseableCreateableElementDisplays())

                    #set($gwe=$ed.getSchemaElement().getGenericXFTElement())

                    #if($gwe.instanceOf("xnat:subjectAssessorData"))

                        <div #if ($dC%2==0) class="row" #else class="row" #end>
                            <h4><a class="data_type" id="dt_$ed.getElementName()" title="$ed.getElementName()">$ed.getSchemaElement().getSingularDescription()</a></h4>
                            <p>$gwe.getWrapped().getXsDescription()</p>
                        </div>

                        #set($dC=$dC+1)

                    #end

                #end

            </div><!-- /rows -->

        </div><!-- /expt_list -->

        <input type="hidden" id="data_type" name="data_type" value="" />
        <br>
        <input type="submit" name="eventSubmit_doSetup" value="Submit" style="display:none;visibility:hidden;" />

    </form>

</div>
<!-- /add_experiment -->


<script type="text/javascript">

jq(function(){

    // //////////////////////////////////////////////// //
    // setting vars for this particular filter instance //
    // //////////////////////////////////////////////// //

    // class of filter box container
    var the_container = '#expt_list .rows' ;

    // class of the filter box(es)
    var filter_input = '#expt_list_filter input' ;

    // default text to show in filter_input field
    var filter_default_text = "type here to filter list (press 'esc' to clear)" ;

    // class of the option boxes
    var option_boxes = '.row' ;

    // option text we're testing
    var option_text = option_boxes + ' ' +  'a' ;

    // class for container of reset button next to filter_input field
    var filter_input_reset = '#filter_clear' ;




    // ///////////////////////////////// //
    // shouldn't need to edit below here //
    // ///////////////////////////////// //

    // show default filter input text
    jq(filter_input).val(filter_default_text);

    // show the options by default
    jq(option_boxes).addClass('show');

    // if the filter_input is blank or default,
    // show default text on focus
    // otherwise keep the text that's in there
    jq(filter_input).focus(function() {

        var _filter_val = jq(this).val();

        if (_filter_val === '') {
            jq(option_boxes).addClass('show');
        }

        else if (_filter_val === filter_default_text) {
            jq(this).val('');
            jq(option_boxes).addClass('show');
        }

    });

    if (jq(filter_input).val() === '') {
        jq(option_boxes).addClass('show');
    }

    // create new case-insensitive :contains selector
    // usage - jq('.this_selector:containsNC("hello")').click(function() { ... });
    jq.extend(jq.expr[":"], {
        "containsNC": function(elem, i, match, array) {
            return (elem.textContent || elem.innerText || "").toLowerCase().indexOf((match[3] || "").toLowerCase()) >= 0;
        }
    });


    // the filtering
    jq(filter_input).keypress(function() {
        var _filter_val = jq(this).val();
        if (_filter_val === '') {
            jq(option_boxes).addClass('show').removeClass('match');
        }
    });

    jq(filter_input).keyup(function() {

        var _filter_val = jq(this).val();

        var _active_container = jq(this).closest(the_container);
        var _filter_match = _active_container.find(option_text+':containsNC('+_filter_val+')');

        if (_filter_val > '') {
            if (_filter_val != filter_default_text) {
                jq(option_boxes).removeClass('show match');
                _filter_match.closest(option_boxes).addClass('show match');
            }
        }

        else {
            jq(option_boxes).addClass('show');
        }

    });


    // clear values and reset filter
    jq(filter_input_reset).click(function() {
        var _active_container = jq(this).closest(the_container);
        _active_container.find(filter_input).val('').focus();
        jq(option_boxes).addClass('show');
    });


    // press 'esc' key to reset
    jq(filter_input).keyup(function(e) {

        if (e.keyCode == 27) {  // key 27 = 'esc'
            var _active_container = jq(this).closest(the_container);
            _active_container.find(filter_input).val('').focus();
            jq(option_boxes).addClass('show');
        }

        /*
        if (e.keyCode == 8) { //delete/backspace key?
            var _filter_val = jq(this).val();
            if (_filter_val === ''){
                jq(option_boxes).show();
            }
        }
        */

    });


    // if the filter_input is blank or default,
    // show default text on blur
    // otherwise keep the text that's in there
    jq(filter_input).blur(function() {

        var _filter_val = jq(this).val();

        if (_filter_val == '') {
            jq(this).val(filter_default_text);
        }
        else {
            jq(this).val(_filter_val);
        }

    });


    /**
     * jQuery.fn.sortElements
     * --------------
     * @param Function comparator:
     *   Exactly the same behaviour as [1,2,3].sort(comparator)
     *
     * @param Function getSortable
     *   A function that should return the element that is
     *   to be sorted. The comparator will run on the
     *   current collection, but you may want the actual
     *   resulting sort to occur on a parent or another
     *   associated element.
     *
     *   E.g. jq('td').sortElements(comparator, function(){
     *      return this.parentNode;
     *   })
     *
     *   The <td>'s parent (<tr>) will be sorted instead
     *   of the <td> itself.
     */
    jQuery.fn.sortElements = (function(){

        var sort = [].sort;

        return function(comparator, getSortable) {

            getSortable = getSortable || function(){return this;};

            var placements = this.map(function(){

                var sortElement = getSortable.call(this),
                        parentNode = sortElement.parentNode,

                // Since the element itself will change position, we have
                // to have some way of storing its original position in
                // the DOM. The easiest way is to have a 'flag' node:
                        nextSibling = parentNode.insertBefore(
                                document.createTextNode(''),
                                sortElement.nextSibling
                        );

                return function() {

                    if (parentNode === this) {
                        throw new Error(
                                "You can't sort elements if any one is a descendant of another."
                        );
                    }

                    // Insert before flag:
                    parentNode.insertBefore(this, nextSibling);
                    // Remove flag:
                    parentNode.removeChild(nextSibling);

                };

            });

            return sort.call(this, comparator).each(function(i){
                placements[i].call(getSortable.call(this));
            });

        };

    })();

    jq(option_boxes).sortElements(function(a, b){
        return jq(a).text() > jq(b).text() ? 1 : -1;
    });


    // super basic simple easy validation
    jq('#form1 .row').click(function() {
        data_type_val = jq(this).find('.data_type').attr('title');
        jq('#data_type').val(data_type_val);

        if (jq('#project').val() > '') {
            if (jq('#part_id').val() > '') {
                jq('#form1').submit();
            }
            else {
                alert('Please select a $displayManager.getSingularDisplayNameForSubject().toLowerCase().');
            }
        }
        else {
            alert('Please select a $displayManager.getSingularDisplayNameForProject().toLowerCase().');
        }

    });

});


// don't need this validator anymore?
/*
function validate(){
   if (document.getElementById("data_type").selectedIndex==0)
   {
     alert("Please select a Data Type.");
     return false;
   }

   return true;
}
*/

</script>

##</span>
##</font>
