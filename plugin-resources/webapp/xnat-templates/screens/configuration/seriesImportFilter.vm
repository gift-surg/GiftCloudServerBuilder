#* @vtlvariable name="displayManager" type="org.nrg.xdat.display.DisplayManager" *#
<!-- Title: Series Import Filter -->
<div class="mgmt_container">
    <div id="seriesImportFilter_mgmt_div" class="row">
        <p>
            This is the site-wide series import filter applied to all incoming and archiving DICOM resources. This
            filter can also be supplemented by series import filters specified at the project level.
        </p>
        <p>
        <label for="seriesImportFilterEnabled" style="vertical-align: top;">Enable Filter:</label>
        <span style="display: inline-block; vertical-align: top;">
            <input type="checkbox" name="seriesImportFilterEnabled" id="seriesImportFilterEnabled" />
        </span><br/>
        <label for="seriesImportFilterMode" style="vertical-align: top;">Filter Mode:</label>
        <span style="display: inline-block; vertical-align: top;">
            <select name="seriesImportFilterMode" id="seriesImportFilterMode" disabled>
                <option value="whitelist">Whitelist</option>
                <option value="blacklist">Blacklist</option>
            </select>
        </span><br/>
        <small>
            Creating an whitelist means that <i>only</i> DICOM series with a series description that matches one of
            series filter patterns will be considered by XNAT import tools such as the upload applet. Creating a 
            blacklist means that all DICOM series will be considered <i>except</i> for series that have one of the
            specified series filter patterns.
        </small>
        </p>
        <p>
            <label for="seriesImportFilterList">Series Filter Patterns:</label><br/>
            <textarea id="seriesImportFilterList" name="seriesImportFilterList" rows="20" cols="80" disabled placeholder="Enter white- or blacklisted series filters separated by newlines, e.g. <b>localizer</b> for localizer series."></textarea><br/>
        </p>
        <small>
            The series filters can be written as exact string matches, but also can be regular expressions. The regular expressions are evaluated using the
            <a href="http://docs.oracle.com/javase/tutorial/essential/regex/" target="_blank">Java regular expression syntax</a>.
        </small>
    </div>
    <div class="buttons">
        <input type="button" class="submit" value="Save" name="eventSubmit_doPerform" id="seriesImportFilter_save_button" onclick="window.seriesImportFilterManager.saveTabSettings();"/>&nbsp;
        <input type="button" class="reset" value="Reset" name="eventSubmit_doReset" id="seriesImportFilter_reset_button" onclick="window.seriesImportFilterManager.resetForm();" disabled/>
    </div>
</div>


<script type="text/javascript">

    var filterList = $('#seriesImportFilterList');
    var filterMode = $('#seriesImportFilterMode');
    var filterEnabled = $('#seriesImportFilterEnabled');

    function toggleControlsOnEnabled() {
        var enabled = filterEnabled.is(':checked');
        filterList.attr('disabled', !enabled);
        filterMode.attr('disabled', !enabled);
    }

    function dirty() {
        // Add check for class manager, since setting the initial value of the radio button
        // will cause the dirty() function to be called, at which point the manager is null.
        if (window.seriesImportFilterManager && !window.seriesImportFilterManager.wasDirty()) {
            window.seriesImportFilterManager.dirtyForm();
        }
        toggleControlsOnEnabled();
    }

    filterList.bind('input propertychange', dirty);
    filterMode.change(dirty);
    filterEnabled.change(dirty);

    function configurationSeriesImportFilterTabChange(obj) {
        if(obj.newValue.get("href")=="#seriesImportFilter") {
            if(window.seriesImportFilterManager==undefined) {
                window.seriesImportFilterManager = new SettingsTabManager('seriesImportFilter_mgmt_div', 'seriesImportFilter');
            }
            toggleControlsOnEnabled();
        }
    }

    function addSeriesImportFilterMgmtMonitor(){
        if(window.configurationTabView.get("activeTab").get("href")=="#seriesImportFilter") {
            if(window.seriesImportFilterManager==undefined) {
                window.seriesImportFilterManager = new SettingsTabManager('seriesImportFilter_mgmt_div', 'seriesImportFilter');
            }
        } else {
            window.configurationTabView.subscribe("activeTabChange", configurationSeriesImportFilterTabChange);
        }
    }

    YAHOO.util.Event.onDOMReady(addSeriesImportFilterMgmtMonitor);
    putConfigurationControls('seriesImportFilter', ['seriesImportFilterEnabled', 'seriesImportFilterMode', 'seriesImportFilterList']);
</script>
